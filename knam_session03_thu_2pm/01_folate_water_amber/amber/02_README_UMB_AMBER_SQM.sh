#!/bin/bash
#

# Generated by CHARMM-GUI (http://www.charmm-gui.org) v3.7
#
# All input files were optimized for AMBER16 or above, so lower version of AMBER can cause some errors.
# In this script, the parallel (MPI) version is commented out. Use this line for parallel execution instead
# (adjust for your MPI and the number of CPUs you want to use). Alternatively, if you have access to
# pmemd.cuda or are willing to use sander, you can replace "pmemd" with pmemd.cuda or sander and "pmemd.MPI"
# with pmemd.cuda.MPI or sander.MPI
#
# There is a known issue in current CHARMM-GUI AMBER inputs with "sander".
# If you are willing to use "sander" for your simulation, please remove "&end" line in all minimization / equilibration
# inputs.

# Activate your conda environment
#eval "$(/scratch/<your_username>/icomse_knam_session/miniconda3/bin/conda shell.bash hook)"
#conda activate
#source /usr/local/miniforge3/activate_conda_env.sh
#conda activate knamsessionenv
#source $CONDA_PREFIX/amber.sh

module load openmpi-5.0.5
source /path/to/amber.sh

# Set executable
amber="mpirun -np 12 sander.MPI"

# Set input/output filenames
init="step3_input"
mini_prefix="step4.0_minimization"
equi_prefix="step4.1_equilibration"
prod_prefix="step5_production_sqm"
prod_step="step5_sqm"
cur_folder="$PWD"

# Minimization
if [ -e "dihe.restraint" ]; then
    sed -e "s/FC/1.0/g" dihe.restraint > "${mini_prefix}.rest"
fi

#$amber -O -i "${mini_prefix}.mdin" -p "${init}.parm7" -c "${init}.rst7" -o "${mini_prefix}.mdout" -r "${mini_prefix}.rst7" -inf "${mini_prefix}.mdinfo" -ref "${init}.rst7"

# Equilibration
if [ -e "dihe.restraint" ]; then
    sed -e "s/FC/1.0/g" dihe.restraint > "${equi_prefix}.rest"
fi

#$amber -O -i "${equi_prefix}.mdin" -p "${init}.parm7" -c "${mini_prefix}.rst7" -o "${equi_prefix}.mdout" -r "${equi_prefix}.rst7" -inf "${equi_prefix}.mdinfo" -ref "${init}.rst7" -x "${equi_prefix}.nc"


# Reaction Specs
rci=-2.0 #initial
rcf=2.0  #final
rcdel=0.1
kmin=40 #40
kmax=150

rc_mid=$(awk "BEGIN {print (${rci} + ${rcf})/2}")
winmax=$(awk "BEGIN {print int(((${rcf} - ${rci})/${rcdel}) + 1)}")

# Production
win=1 #CHANGE HERE IF COUNTINUING STARTING WINDOW
#winmax=${win} #UNCOMMENT IF RUNNING ONLY ONE WINDOW 
icnt=2  #CHANGE HERE IF COUNTINUING A RUN AT SPECIFIC COUNTER IN ${win}
cntmax=5 #MAXIMUM NUMBER OF CHUNKS PER WINDOW

export mdqrst=""
export mdwin=""
export mdcnt=""
export mdrc=""
export mdkumb=""

for ((i=$win;i<=$winmax;i++)); do
    cnt=${icnt}  
    while [ $cnt -le $cntmax ]; do
        pcnt=$(( cnt - 1 ))
        pwin=$(( i - 1 ))
        rc=$(awk "BEGIN {printf \"%.2f\", ${rci} + ((${i} - 1) * ${rcdel})}")
        scale=$(awk "BEGIN {printf \"%.6f\", 1 - ((2*($rc - $rc_mid)/($rcf - $rci))^2)}")
        kumb=$(awk "BEGIN {printf \"%.2f\", $kmin + ($kmax - $kmin)*$scale}")
        istep=${prod_step}_window_${i}_${cnt}
        
        if   [[ ${cnt} -eq 1 && ${i} -eq 1 ]]; then
			pstep=${equi_prefix}
        elif [[ ${cnt} -eq 1 && ${i} -gt 1 ]]; then
            pstep=${prod_step}_window_${pwin}_${cntmax}
        elif [[ ${cnt} -gt 1  ]]; then
            pstep=${prod_step}_window_${i}_${pcnt}
        fi
        
        qrst=1
        export mdqrst=$qrst
        export mdwin=$i
	    export mdcnt=$cnt
        export mdrc=$rc
        export mdkumb=$kumb
        envsubst < ${prod_prefix}.umb > step5_sqm_rc_$rc.umb
        envsubst < ${prod_prefix}.mdin > ${istep}.mdin
        $amber -O -i "${istep}.mdin" -p "${init}.parm7" -c "${pstep}.rst7" -o "${istep}.mdout" -r "${istep}.rst7" -inf "${istep}.mdinfo" -ref "${init}.rst7" -x "${istep}.nc"
        cnt=$(( cnt + 1 ))
    done
done 


